from abc import ABC, abstractmethod

class GeometricFigure(ABC):
    @abstractmethod
    def get_perimeter(self):
        pass

    @abstractmethod
    def get_area(self):
        pass

class Circle(GeometricFigure):
    def __init__(self, radius):
        self.radius = radius

    def get_perimeter(self):
        return 2 * 3.14 * self.radius

    def get_area(self):
        return 3.14 * self.radius * self.radius

class Rectangle(GeometricFigure):
    def __init__(self, width, height):
        self.width = width
        self.height = height

    def get_perimeter(self):
        return 2 * (self.width + self.height)

    def get_area(self):
        return self.width * self.height

circle = Circle(radius=5)
rectangle = Rectangle(width=4, height=6)

print(f"Circle perimeter: {circle.get_perimeter()}")
print(f"Circle area: {circle.get_area()}")

print(f"Rectangle perimeter: {rectangle.get_perimeter()}")
print(f"Rectangle area: {rectangle.get_area()}")
