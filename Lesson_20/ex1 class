
from abc import ABC, abstractmethod
class Employee(ABC):
    def __init__(self,name:str,position:str):
        self._name = name
        self._position = position

    @abstractmethod
    def calculate_salary(self):
        pass

    def get_info(self):
        return f"Name: {self._name}, Position: {self._position}"

class Doctor(Employee):
    def __init__(self, name, position, salary:float, bonus):
        super().__init__(name, position)
        self._salary = salary
        self._bonus = bonus

    def calculate_salary(self):
       self._salary += self._bonus
       return self._salary

class QA(Employee):
    def __init__(self, name, position, salary:float):
        super().__init__(name, position)
        self._salary = salary

    def calculate_salary(self):
        self._salary = self._salary
        return self._salary

employee_1 = Doctor(name="Ani", position="Doctor", salary=1000, bonus=500)
employee_2 = QA(name="Simon", position="QA", salary=600)

print(employee_1.get_info())
print(f"Doctor salary: ${employee_1.calculate_salary()}")

print(employee_2.get_info())
print(f"QA salary: ${employee_2.calculate_salary()}")

